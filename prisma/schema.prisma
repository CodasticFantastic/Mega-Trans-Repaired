// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  DRIVER
}

enum OrderType {
  Zwrot
  Odbior
  Dostawa
}

enum Status {
  Producent
  Magazyn
  Dostawa
  Pobranie
  Zrealizowane
  Anulowane
}

enum CommodityType {
  Paczka
  Gabaryt
  Paleta
}

enum CommodityPaymentType {
  Pobranie
  Przelew
}

model User {
  id        Int       @id @default(autoincrement())
  company   String
  email     String    @unique
  phone     String
  password  String
  nip       String
  country   String
  city      String
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  orders    Order[]
  role      Role      @default(USER)
  ApiKey    ApiKey[]
}

model Driver {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  phone     String
  email     String    @unique
  password  String
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  role      Role      @default(DRIVER)
}

enum OrderSource {
  BaseLinker
  CustomIntegration
  Manual
}

model Order {
  id                     Int                  @id @default(autoincrement())
  orderId                String               @unique
  user                   User                 @relation(fields: [userId], references: [id])
  userId                 Int
  courier                Driver?              @relation(fields: [courierId], references: [id])
  courierId              Int?
  deliveryDate           String?
  status                 Status               @default(Producent)
  orderType              OrderType
  orderCountry           String
  orderStreet            String
  orderStreetNumber      String
  orderFlatNumber        String?
  orderCity              String
  orderPostCode          String
  orderState             String
  orderNote              String?
  recipientName          String
  recipientPhone         String
  recipientEmail         String?
  orderPaymentType       CommodityPaymentType
  orderPrice             Float?
  packages               Package[]
  packageManualCount     Int?                 @map("package_manual_count")
  currency               String?
  orderSupplierId        String?              @map("order_supplier_id")
  orderAddressConfidence Float?               @map("order_address_confidence")
  orderAddressRawData    String?              @map("order_address_raw_data")
  orderSource            OrderSource          @default(Manual) @map("order_source")
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  deletedAt              DateTime?
}

model Package {
  packageId     String        @id @unique
  belongsTo     Order         @relation(fields: [orderId], references: [orderId])
  orderId       String
  commodityType CommodityType
  commodityName String
  commodityNote String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
}

enum ApiKeyType {
  BaseLinker
  CustomIntegration
}

model ApiKey {
  id         Int        @id @default(autoincrement())
  apiKey     String     @unique @map("api_key")
  apiKeyName String     @map("api_key_name")
  userId     Int        @map("user_id")
  user       User       @relation(fields: [userId], references: [id])
  type       ApiKeyType @default(CustomIntegration)
  isActive   Boolean    @default(true) @map("is_active")
  lastUsed   DateTime?  @map("last_used")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  deletedAt  DateTime?  @map("deleted_at")
}
